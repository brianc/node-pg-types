#!/usr/bin/env node

const { Client } = require('pg')
const fs = require('fs')
const path = require('path')

const query = `
SELECT json_object_agg(UPPER(PT.typname), PT.oid::int4 ORDER BY pt.oid)
FROM pg_type PT
WHERE typnamespace = (SELECT pgn.oid FROM pg_namespace pgn WHERE nspname = 'pg_catalog') -- Take only builting Postgres types with stable OID (extension types are not guaranted to be stable)
AND typtype IN ('b', 'r', 'm') -- Only basic (b), range (r), and multirange (m) types
AND typelem = 0 -- Ignore aliases
AND typisdefined -- Ignore undefined types
`

const postgresVersions = ['11', '14']

async function queryPostgresVersion (version) {
  const host = `postgres-${version}`
  console.log(`Querying PostgreSQL ${version} at ${host}...`)

  const client = new Client({
    host: host,
    port: 5432,
    user: process.env.PGUSER || 'postgres',
    password: process.env.PGPASSWORD || 'postgres',
    database: process.env.PGDATABASE || 'postgres'
  })

  try {
    await client.connect()
    const result = await client.query(query)
    const types = result.rows[0].json_object_agg
    console.log(`Found ${Object.keys(types).length} types in PostgreSQL ${version}`)
    return types
  } finally {
    await client.end()
  }
}

async function generate () {
  console.log('Starting PostgreSQL type generation...')

  // Query all available PostgreSQL versions in parallel
  const typeResults = await Promise.all(
    postgresVersions.map(version => queryPostgresVersion(version))
  )

  // Merge all types from different versions
  let allTypes = {}
  for (const types of typeResults) {
    allTypes = { ...allTypes, ...types }
  }

  console.log(`Total unique types found: ${Object.keys(allTypes).length}`)

  // Determine output directory
  const outputDir = process.env.OUTPUT_PATH || path.join(__dirname, '..', 'lib')

  // Generate main builtins file
  const header = `/**
PostgreSQL builtin type OIDs

DO NOT EDIT THIS FILE BY HAND!
This file is generated automatically by the generator in generator/generate.js
To modify the types, edit the generator script and run: npm run generate

Generated by querying PostgreSQL ${postgresVersions.join(', ')} to ensure comprehensive
type coverage for parsing.

Query used:
${query.trim()}
 */`

  const entries = Object.entries(allTypes)
    .sort(([, a], [, b]) => a - b)
    .map(([name, oid]) => `  ${name}: ${oid}`)
    .join(',\n')

  const content = `${header}

module.exports = {
${entries}
}
`

  // Write main builtins file
  const outputPath = path.join(outputDir, 'builtins.js')
  await fs.promises.writeFile(outputPath, content)

  // Generate TypeScript definitions
  const tsHeader = `/**
PostgreSQL builtin type OIDs (TypeScript definitions)

DO NOT EDIT THIS FILE BY HAND!
This file is generated automatically by the generator in generator/generate.js
To modify the types, edit the generator script and run: npm run generate

Generated by querying PostgreSQL ${postgresVersions.join(', ')} to ensure comprehensive
type coverage for parsing.

Query used:
${query.trim()}
 */`

  const tsEntries = Object.entries(allTypes)
    .sort(([, a], [, b]) => a - b)
    .map(([name, oid]) => `  ${name} = ${oid}`)
    .join(',\n')

  const tsContent = `${tsHeader}

export enum builtins {
${tsEntries}
}
`

  // Write TypeScript definitions file
  const tsOutputPath = path.join(outputDir, 'builtins.d.ts')
  await fs.promises.writeFile(tsOutputPath, tsContent)

  console.log('Generated lib/builtins.js and lib/builtins.d.ts successfully')
}

async function main () {
  try {
    await generate()
  } catch (err) {
    console.error('Error generating types:', err)
    process.exit(1)
  }
}

main()
